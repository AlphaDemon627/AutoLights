/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AutoLightsUI;

import static java.awt.image.ImageObserver.WIDTH;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mido Austin
 */
public class ManageIntersection extends javax.swing.JFrame {

    /**
     * Creates new form AddIntersection
     */
    public ManageIntersection() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        move_id = new javax.swing.JTextField();
        inter = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        move = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dir = new javax.swing.JTextField();
        loc = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        insertBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        add12 = new javax.swing.JButton();
        add6 = new javax.swing.JButton();
        Return = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("intersection");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        move_id.setToolTipText("Enter J followed by Id (J1)");

        inter.setToolTipText("01, 02 . . . according to no. of movement");

        jLabel2.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("movement id");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        move.setToolTipText("intersection-move id (J1-01)");

        jLabel3.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel3.setText("movement");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel4.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel4.setText("direction");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        dir.setToolTipText("traffic flow FromToBound (NEB)");
        dir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dirActionPerformed(evt);
            }
        });

        loc.setToolTipText("Location of Intersecion (Nyayo stdm. Rnd Abt.)");
        loc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel5.setText("location");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        insertBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        insertBtn.setText("INSERT");
        insertBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        updateBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        updateBtn.setText("UPDATE");
        updateBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        deleteBtn.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        add12.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        add12.setText("NEW 12 MOVEMENT");
        add12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add12ActionPerformed(evt);
            }
        });

        add6.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        add6.setText("NEW 6 MOVEMENT");
        add6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add6ActionPerformed(evt);
            }
        });

        Return.setFont(new java.awt.Font("Tw Cen MT", 0, 14)); // NOI18N
        Return.setText("RETURN");
        Return.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tw Cen MT", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Manage intersections & Movements");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dir, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE)
                            .addComponent(move, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(inter, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(move_id, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loc)))
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addGap(44, 44, 44))
            .addGroup(layout.createSequentialGroup()
                .addComponent(insertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(add12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(add6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(Return, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(move_id))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inter, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                    .addComponent(jLabel2))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(move, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                    .addComponent(jLabel3))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE)
                    .addComponent(dir))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                    .addComponent(loc))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(add12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(add6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Return, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dirActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        String movement_id = move_id.getText();
        String intersection = inter.getText();
        String movement = move.getText();
        String direction = dir.getText();
        String location = loc.getText();
        
        if(movement_id.isEmpty() || intersection.isEmpty() || movement.isEmpty() || direction.isEmpty() || location.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Update Error", WIDTH);
        }else{
        String insert = "INSERT INTO `movements`(`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES (?,?,?,?,?)";
        try {
                PreparedStatement pst = con.prepareStatement(insert);
                pst.setString(1,movement_id);
                pst.setString(2,intersection);
                pst.setString(3,movement);
                pst.setString(4,direction);
                pst.setString(5,location);
                pst.executeUpdate();
                System.out.println("done");
                
                JOptionPane.showMessageDialog(this,"Insert Complete \n."
                        + "Movement_Id : "+movement_id+" \n"
                        + "intersection : "+intersection+" \n"
                        + "Movement : "+movement+" \n"
                        + "Direction : "+direction+" \n"
                        + "Location : "+location+" \n"
                        );
                setFieldsNull();
                
            } catch (SQLException ex) {
                System.out.println("Error" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void add12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add12ActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Insert new intersection with 12 movements", "Confirmation", dialogButton);
        if(dialogResult == 0){
            if(loc.getText().isEmpty()){
                JOptionPane.showMessageDialog(this,"Enter location of new intersection.","Insert error",JOptionPane.ERROR_MESSAGE);
            }else{
                String location = loc.getText();
                id = getnsetId();
                add12(id,location);
                JOptionPane.showMessageDialog(this,"New Intersection Created. intersection Id : "+id);
                setFieldsNull();
            }
        }else{
            JOptionPane.showMessageDialog(this,"Insert Event cancelled.");
        }
    }//GEN-LAST:event_add12ActionPerformed

    private void add6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add6ActionPerformed
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Insert new intersection with 6 movements", "Confirmation", dialogButton);
        if(dialogResult == 0){
            if(loc.getText().isEmpty()){
                JOptionPane.showMessageDialog(this,"Enter location of new intersection.","Insert error",JOptionPane.ERROR_MESSAGE);
            }else{
                String location = loc.getText();
                id = getnsetId();
                add6(id,location);
                JOptionPane.showMessageDialog(this,"New Intersection Created. intersection Id : "+id);
                setFieldsNull();
            }
        }else{
            JOptionPane.showMessageDialog(this,"Insert Event cancelled.");
        }
    }//GEN-LAST:event_add6ActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(inter.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Kindly enter intersection to be deleted", "Delete Error Error", WIDTH);
        }else{
            String intersection = inter.getText();
            String delete = "DELETE FROM `movements` WHERE `intersection` = '"+intersection+"';";
            try {
                PreparedStatement pst = con.prepareStatement(delete);
                pst.execute();
                System.out.println("done");
                JOptionPane.showMessageDialog(this,"Intersection "+intersection+" has been deleted");
                setFieldsNull();
            } catch (SQLException ex) {
                System.out.println("Error" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        
        String movement_id = move_id.getText();
        String intersection = inter.getText();
        String movement = move.getText();
        String direction = dir.getText();
        String location = loc.getText();
        
        if(movement_id.isEmpty() || intersection.isEmpty() || movement.isEmpty() || direction.isEmpty() || location.isEmpty()){
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Update Error", WIDTH);
        }else{
        String update = "UPDATE `movements` SET `intersection`='"+intersection+"',`movement`='"+movement+"',`direction`='"+direction+"',`location`='"+location+"' WHERE `movement_id`='"+movement_id+"';";
        try {
                PreparedStatement pst = con.prepareStatement(update);
                pst.executeUpdate();
                System.out.println("done");
                
                JOptionPane.showMessageDialog(this,"Update Complete \n."
                        + "Movement_Id : "+movement_id+" \n"
                        + "intersection : "+intersection+" \n"
                        + "Movement : "+movement+" \n"
                        + "Direction : "+direction+" \n"
                        + "Location : "+location+" \n"
                        );
                setFieldsNull();
            } catch (SQLException ex) {
                System.out.println("Error" + ex.getMessage());
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void ReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnActionPerformed
        new DBData().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_ReturnActionPerformed

    private void locActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_locActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManageIntersection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManageIntersection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManageIntersection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManageIntersection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManageIntersection().setVisible(true);
            }
        });
    }
    
    private static void add12(int id, String location){
        Connection con = new DBConnector().connect();
       
       String insert1 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-01', 'J"+id+"', '01', 'SWB', '"+location+"');";
       System.out.println(insert1);
       try {
            PreparedStatement pst = con.prepareStatement(insert1);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert2 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-02', 'J"+id+"', '02', 'SNB', '"+location+"');";
        System.out.println(insert2);
        try {
            PreparedStatement pst = con.prepareStatement(insert2);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert3 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-03', 'J"+id+"', '03', 'SEB', '"+location+"');";
        System.out.println(insert3);
        try {
            PreparedStatement pst = con.prepareStatement(insert3);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert4 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-04', 'J"+id+"', '04', 'WNB', '"+location+"');";
        System.out.println(insert4);
        try {
            PreparedStatement pst = con.prepareStatement(insert4);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert5 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-05', 'J"+id+"', '05', 'WEB', '"+location+"');";
        System.out.println(insert5);
        try {
            PreparedStatement pst = con.prepareStatement(insert5);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert6 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-06', 'J"+id+"', '06', 'WSB', '"+location+"');";
           System.out.println(insert6);
           try {
            PreparedStatement pst = con.prepareStatement(insert6);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert7 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-07', 'J"+id+"', '07', 'SEB', '"+location+"');";
           System.out.println(insert7);
           try {
            PreparedStatement pst = con.prepareStatement(insert7);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert8 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-08', 'J"+id+"', '08', 'SNB', '"+location+"');";
           System.out.println(insert8);
           try {
            PreparedStatement pst = con.prepareStatement(insert8);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert9 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-09', 'J"+id+"', '09', 'SWB', '"+location+"');";
           System.out.println(insert9);
           try {
            PreparedStatement pst = con.prepareStatement(insert9);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert10 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-10', 'J"+id+"', '10', 'NEB', '"+location+"');";
           System.out.println(insert10);
           try {
            PreparedStatement pst = con.prepareStatement(insert10);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert11 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-11', 'J"+id+"', '11', 'NWB', '"+location+"');";
           System.out.println(insert11);
           try {
            PreparedStatement pst = con.prepareStatement(insert11);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert12 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-12', 'J"+id+"', '12', 'NSB', '"+location+"');";
           System.out.println(insert12);
           try {
            PreparedStatement pst = con.prepareStatement(insert12);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }
    }
    
    private static void add6(int id, String location){
        Connection con = new DBConnector().connect();
       
       String insert1 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-01', 'J"+id+"', '01', 'SWB', '"+location+"');";
       System.out.println(insert1);
       try {
            PreparedStatement pst = con.prepareStatement(insert1);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert2 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-02', 'J"+id+"', '02', 'SNB', '"+location+"');";
        System.out.println(insert2);
        try {
            PreparedStatement pst = con.prepareStatement(insert2);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert3 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-03', 'J"+id+"', '03', 'SEB', '"+location+"');";
        System.out.println(insert3);
        try {
            PreparedStatement pst = con.prepareStatement(insert3);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert4 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-04', 'J"+id+"', '04', 'WNB', '"+location+"');";
        System.out.println(insert4);
        try {
            PreparedStatement pst = con.prepareStatement(insert4);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

        String insert5 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-05', 'J"+id+"', '05', 'WEB', '"+location+"');";
        System.out.println(insert5);
        try {
            PreparedStatement pst = con.prepareStatement(insert5);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }

    String insert6 = "INSERT INTO `movements` (`movement_id`, `intersection`, `movement`, `direction`, `location`) VALUES ('J"+id+"-06', 'J"+id+"', '06', 'WSB', '"+location+"');";
           System.out.println(insert6);
           try {
            PreparedStatement pst = con.prepareStatement(insert6);
            pst.executeUpdate();
            System.out.println("done");
        } catch (SQLException ex) {
            System.out.println("Error" + ex.getMessage());
        }
    }
    
    private static int getnsetId(){
        String querry = "SELECT movement_id FROM `movements` ORDER BY movement_id DESC LIMIT 1";
        Connection con = new DBConnector().connect();
        String idGet="";
        
        PreparedStatement pst;
        try {
            pst = con.prepareStatement(querry);
            ResultSet rs = pst.executeQuery();
                while(rs.next()){
                 idGet = rs.getString("movement_id");
                }
            System.out.println(idGet);
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        id = (Integer.decode(idGet.substring(1, 2)))+1;
        return id;
    }
    
    private void setFieldsNull(){
        move_id.setText("");
        inter.setText("");
        move.setText("");
        dir.setText("");
        loc.setText("");
    }
private static int id = 1;
Connection con = new DBConnector().connect();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Return;
    private javax.swing.JButton add12;
    private javax.swing.JButton add6;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JTextField dir;
    private javax.swing.JButton insertBtn;
    private javax.swing.JTextField inter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField loc;
    private javax.swing.JTextField move;
    private javax.swing.JTextField move_id;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
